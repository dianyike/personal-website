# **Cursor Rules 通用規則**

## **規則 0：全域性指令與預設**

*   **0.1 溝通語言：**
    *   所有與使用者的互動和回覆都必須使用中文。
*   **0.2 PowerShell 命令使用規範：**
    *   建立資料夾命令：`New-Item -ItemType Directory -Path "目標資料夾路徑"`
    *   建立空檔案命令：`New-Item -ItemType File -Path "目標檔案路徑/檔名.字尾"`
    *   複製檔案命令：`Copy-Item -Path "原始檔路徑" -Destination "目標檔案路徑"`
    *   **注意：** PowerShell 中不直接支援 `&&` 連結符。每個命令應獨立執行，或使用 PowerShell 特有的管道 `|` 或分號 `;` (在適用情況下) 進行連結。
*   **0.3 修改前備份規則（"copy"資料夾機制）：**
    1.  在對任何現有程式碼檔案進行修改或生成新程式碼覆蓋舊程式碼之前，必須執行以下操作。
    2.  如果使用者說明不使用 `copy` 資料夾備份，則不執行此規則(0.3修改前備份規則（"copy"資料夾機制）)。
    3.  檢查專案根目錄下是否存在名為 `copy` 的資料夾。
    4.  如果 `copy` 資料夾不存在，則使用命令 `New-Item -ItemType Directory -Path "copy"` 建立它。
    5.  將被修改的原始檔案完整複製到 `copy` 資料夾中。例如，若要修改 `src/app.js`，則執行 `Copy-Item -Path "src/app.js" -Destination "copy/app.js"` (檔名保持一致，路徑資訊可選保留或扁平化儲存在copy資料夾內，建議扁平化以簡化)。
*   **0.4 `README.md` 的核心地位：**
    *   `README.md` 檔案是專案分析、技術選型、頁面規劃、技術實現細節和開發狀態的核心載體，必須在各個開發環節中保持其內容的準確性和最新狀態。

## **規則 1：專案初始化（`README.md` 的建立與引導）**

*   **1.1 觸發條件：**
    *   當 AI 助手開始處理一個新專案，或在當前專案目錄中未檢測到 `README.md` 檔案時，此規則被啟用。
*   **1.2 核心行動原則：**
    1.  **主動詢問使用者專案基本資訊**：在建立任何檔案之前，首先與使用者溝通，瞭解專案概況。
    2.  **"先不要生成程式碼"**：在獲取專案基本資訊並建立初步的 `README.md` 規劃之前，AI 助手不應生成任何具體的業務邏輯或模組程式碼。
*   **1.3 建立並填充 `README.md`：**
    1.  **收集專案資訊**：透過與使用者對話，獲取以下資訊：
        *   專案要建立什麼內容（專案型別，例如：一個資料分析工具、一個API服務、一個桌面應用等）。
        *   專案將使用的主要程式語言（例如：Python, JavaScript, Java, C#等）。
        *   專案的核心功能或主要內容概述。
    2.  使用命令 `New-Item -ItemType File -Path "README.md"` 在專案根目錄建立 `README.md` 檔案。
    3.  根據收集到的資訊，向 `README.md` 檔案中寫入以下結構化內容（AI 應根據使用者輸入填充括號中的示例內容，並可根據專案型別調整章節）：
        ```markdown
        # [專案名稱] 
        (例如：客戶關係管理CLI工具)

        ## 專案概括
        (AI將根據使用者描述填寫，例如：本專案旨在開發一個基於[使用者指定的語言，如Python]的命令列工具，用於管理客戶資訊、記錄互動並生成報告。)

        ## 技術選型
        (AI將根據使用者指定的程式語言和專案型別填寫，例如：
        - 主要程式語言: [使用者指定的語言，如 Python 3.10+]
        - 關鍵庫/框架: [例如 Click (用於CLI), Pandas (資料處理), SQLAlchemy (資料庫互動) (對於Python專案) / Node.js, Express (對於API服務)]
        - 資料儲存: [根據專案需求選擇，如 SQLite, JSON檔案, PostgreSQL]
        - 版本控制: Git
        - 其他工具: [例如 Pytest (測試), Docker (容器化)])

        ## 專案結構 / 模組劃分
        (AI將根據專案型別和使用者輸入規劃，例如：
        - `/[專案主資料夾名]/`: 核心邏輯程式碼
          - `/cli`: 命令列介面處理模組
          - `/core`: 核心業務邏輯模組 (如客戶管理、互動記錄)
          - `/db`: 資料庫互動模組
          - `/utils`: 工具類和輔助函式
        - `/data`: 使用者資料儲存目錄 (例如SQLite資料庫檔案)
        - `/tests`: 測試程式碼
        - `main.py` 或 `app.js`: 程式入口點)

        ## 核心功能 / 模組詳解
        (AI將根據使用者描述的核心功能列出，例如：
        - `add_contact`: 新增新客戶聯絡人功能
        - `log_interaction`: 記錄與客戶的互動
        - `generate_report`: 生成客戶活動報告
        - `search_contact`: 搜尋客戶資訊)

        ## 資料模型 (如果適用)
        (例如：
        - Customer: { id, name, email, phone, company }
        - Interaction: { id, customer_id, date, type, notes })

        ## 技術實現細節
        [本部分初始為空。在後續開發每一個模組/功能時，AI 會自動將該模組/功能的技術實現方案、關鍵程式碼片段說明等填充至此。]

        ## 開發狀態跟蹤
        [AI 將根據"核心功能 / 模組詳解"自動生成下表的初始行，並在開發過程中實時更新各模組/功能的狀態。]
        | 模組/功能        | 狀態     | 負責人 | 計劃完成日期 | 實際完成日期 | 備註         |
        |------------------|----------|--------|--------------|--------------|--------------|
        | [模組1名稱]      | 未開始   | AI     | YYYY-MM-DD   |              |              |
        | [模組2名稱]      | 未開始   | AI     | YYYY-MM-DD   |              |              |
        | ...              | ...      | ...    | ...          | ...          | ...          |

        ## 程式碼檢查與問題記錄
        [本部分用於記錄程式碼檢查結果和開發過程中遇到的問題及其解決方案。]

        ## ......
        [可根據專案需要新增其他章節，如部署指南、使用說明等。]
        ```
*   **1.4 使用者互動與引導：**
    1.  在開始時，首先向使用者提問：
        "您好！為了更好地協助您並開始專案規劃，請告訴我：
        1.  您計劃建立什麼型別的專案？（例如：一個Python資料分析指令碼，一個Node.js的API服務，一個桌面應用等）
        2.  這個專案主要將使用什麼程式語言？
        3.  能簡要描述一下這個專案的主要內容或核心功能嗎？"
    2.  在獲取上述資訊並建立填充了初步規劃的 `README.md` 檔案後，向使用者回覆：
        "我已經根據您的描述為您建立了 `README.md` 檔案，並完成了專案概括、初步技術選型建議以及專案結構/模組規劃。目前'技術實現細節'部分為空，將在後續開發中逐步填充。'開發狀態跟蹤'表也已根據核心功能初始化。請問您對當前規劃還需要補充或修改嗎？如果滿意，請輸入 `/開發`，我將按照規劃順序自動開發所有模組/功能；或者輸入 `/開發 <模組/功能名稱>` 來開發特定模組/功能。"

## **規則 2：指令處理通用邏輯**

*   **2.1 指令字首：**
    *   所有使用者指令均以正斜槓 `/` 作為字首。
*   **2.2 `README.md` 實時更新：**
    *   在執行涉及程式碼生成、修改、檢查或測試的指令後，AI 必須自動更新 `README.md` 檔案中的相關部分，尤其是"技術實現細節"、"開發狀態跟蹤"以及可能的"程式碼檢查與問題記錄"等。

## **規則 3：`/開發` 指令（批次開發）**

*   **3.1 觸發條件：**
    *   使用者輸入指令 `/開發` (不帶任何模組/功能名稱)。
*   **3.2 執行流程：**
    1.  嚴格遵守 **規則 0.3 (修改前備份規則)**，為每一個即將生成或修改的檔案建立備份。
    2.  查閱 `README.md` 中的"專案結構 / 模組劃分"（或"核心功能 / 模組詳解"）和"開發狀態跟蹤"表，確定所有狀態為"未開始"或"進行中"的模組/功能。
    3.  按照 `README.md` 中規劃的順序，逐個開發這些模組/功能：
        a.  生成模組/功能的程式碼（包括必要的類、函式、邏輯和依賴呼叫）。
        b.  在 `README.md` 的"技術實現細節"部分，詳細記錄當前開發模組/功能的技術方案、關鍵程式碼設計、API 互動（如果適用）等。
        c.  更新 `README.md` 中"開發狀態跟蹤"表裡對應模組/功能的狀態（例如，從未開始 -> 進行中 -> 已完成）。
    4.  每完成一個或一批模組/功能的開發，向使用者報告進展，並提示 `README.md` 已更新。

## **規則 4：`/開發 <模組/功能名稱>` 指令（指定模組/功能開發）**

*   **4.1 觸發條件：**
    *   使用者輸入指令 `/開發 <模組/功能名稱>` (例如：`/開發 使用者認證模組` 或 `/開發 資料清洗指令碼`)。
*   **4.2 執行流程：**
    1.  嚴格遵守 **規則 0.3 (修改前備份規則)**。
    2.  集中資源開發使用者指定的 `<模組/功能名稱>`。
    3.  生成該模組/功能的程式碼。
    4.  在 `README.md` 的"技術實現細節"部分，記錄該模組/功能的實現方案。
    5.  更新 `README.md` 中"開發狀態跟蹤"表裡該模組/功能的狀態。
    6.  完成後，向使用者報告："【<模組/功能名稱>】已開發完成，相關技術細節和狀態已同步更新至 README.md。"

## **規則 5：`/檢查` 指令（程式碼檢查）**

*   **5.1 觸發條件：**
    *   使用者輸入指令 `/檢查`。
*   **5.2 執行流程：**
    1.  AI 助手根據其內部設定的程式碼規範、最佳實踐或專案特定的 "coderules" 對已生成的程式碼進行自檢。
    2.  檢查內容可包括：潛在的邏輯缺陷、未處理的邊界條件、程式碼風格一致性、可維護性、安全性等。
    3.  識別可能遺漏的功能點或需求中不明確、需要使用者進一步確認的地方。
    4.  將檢查結果（發現的問題、改進建議、待確認事項）詳細記錄在 `README.md` 的"程式碼檢查與問題記錄"部分，或在相關模組/功能的"技術實現細節"中備註。
    5.  向使用者回覆："程式碼檢查已完成。發現 <N> 個潛在問題/待確認點，詳情已記錄在 README.md 中。例如：<簡述1-2個重要發現>。請您查閱並確認。"

## **規則 6：`/測試 <模組/功能名稱>` 指令（測試開發）**

*   **6.1 觸發條件：**
    *   使用者輸入指令 `/測試 <模組/功能名稱>` (例如：`/測試 使用者認證模組` 或 `/測試 資料處理核心函式`)。
*   **6.2 執行流程：**
    1.  嚴格遵守 **規則 0.3 (修改前備份規則)**，為即將生成的測試檔案建立備份（如果測試檔案是新建，則此步驟針對被測試的原始檔如有修改）。
    2.  為指定的 `<模組/功能名稱>` 建立單元測試、整合測試或功能測試用例（根據專案技術棧和測試策略決定）。
    3.  將測試檔案儲存在專案約定的測試目錄下（例如 `tests/` 或 `src/modules/<ModuleName>/tests/`）。
    4.  更新 `README.md`：
        *   在"技術實現細節"中對應模組/功能的部分，新增測試覆蓋情況說明和關鍵測試用例描述。
        *   如果"開發狀態跟蹤"表中有測試相關的列，則更新其狀態。
    5.  向使用者回覆（需替換括號中的佔位符）：
        "【<模組/功能名稱>】的單元測試已建立完成，README.md 已同步更新，測試檔案已儲存在 <測試檔案存放路徑> 中。
        這些測試主要包括：
        - <測試用例1的簡要描述>: <該測試用例的主要測試目的或驗證點>
        - <測試用例2的簡要描述>: <該測試用例的主要測試目的或驗證點>
        ...
        您可以在 <例如：您的IDE如VS Code的測試面板 或透過命令列 'python -m unittest discover tests'> 中執行這些測試。
        請輸入 `/開發 <其他模組/功能名稱>` 繼續開發其他模組/功能，或提出其他指令。"
*   **6.3 長輸出處理：**
    *   如果測試用例的描述內容過長，可能導致一次性輸出不完整，AI 應主動暫停輸出，並提示使用者：
        "由於測試內容較長，輸出暫停。請輸入 `/繼續`，我將繼續描述剩餘的測試內容。"

## **規則 7：`/問題` 指令（協助解決問題）**

*   **7.1 觸發條件：**
    *   使用者輸入指令 `/問題`，並隨後描述遇到的具體問題或錯誤。
*   **7.2 執行流程：**
    1.  AI 助手需仔細閱讀並理解使用者反饋的問題描述。
    2.  全面閱讀專案中與問題相關的程式碼（例如，如果使用者提到 **node.js** 相關問題，則重點分析後端程式碼；若是前端展示問題，則分析對應頁面和元件程式碼），理解其上下文和工作原理。
    3.  根據使用者反饋和程式碼分析，定位問題產生的可能原因，並構思解決方案。
    4.  在提出解決方案或進行程式碼修改前，向使用者闡述分析過程和解決思路。
    5.  如果需要修改程式碼：
        a.  嚴格遵守 **規則 0.3 (修改前備份規則)**。
        b.  實施程式碼修改，確保改動儘可能小，避免引入新的問題或影響其他功能。
        c.  對修改部分進行內部測試（如果可行）。
    6.  向使用者解釋所做的修改以及這些修改如何解決問題。
    7.  若解決方案涉及架構調整或重要邏輯變更，需更新 `README.md` 的相關部分。
    8.  全程保持使用中文溝通。

## **規則 8：`/繼續` 指令（恢復任務/繼續描述）**

*   **8.1 觸發條件：**
    *   使用者輸入指令 `/繼續`。
*   **8.2 執行流程（根據上下文判斷）：**
    *   **情況一：接續長輸出**
        *   如果前一個操作（如 `/測試`）因輸出過長而暫停，則此指令會使 AI 繼續輸出之前未完成的內容。
    *   **情況二：恢復開發流程**
        1.  AI 助手重新仔細閱讀 `README.md`（特別是"開發狀態跟蹤"表和"技術實現細節"）、`.cursorrules` 檔案（如果存在並定義了更多上下文規則）以及已開發完成的模組/功能程式碼。
        2.  根據 `README.md` 中的專案進度，自動判斷下一個應進行的任務（例如，下一個"未開始"的模組或功能）。
        3.  主動開始執行該任務，如同使用者輸入了相應的開發指令（例如 `/開發 <下一個模組/功能名稱>`）。
        4.  並向使用者說明："好的，我將繼續進行 <下一個任務描述，如：核心資料處理模組的進一步開發>。"

## **規則 9：專案狀態檢測（新會話/重連時）**

*   **9.1 觸發條件：**
    *   當使用者在一個已存在 `README.md` 檔案的專案中開啟新的會話時，AI 助手應首先執行此規則。
*   **9.2 執行流程：**
    1.  向使用者傳送提示資訊："我正在分析專案當前狀態，請稍等..."
    2.  仔細分析 `README.md` 檔案，特別是"開發狀態跟蹤"表和"技術實現細節"，並結合檢查專案目錄中實際存在的程式碼檔案。
    3.  根據分析結果，判斷專案進度，並與使用者進行如下互動：
        *   **若專案已規劃但未實際開始（多數模組/功能為"未開始"，且無對應程式碼檔案）：**
            "根據 README.md 的規劃，專案似乎還未正式開始開發。您希望現在開始嗎？您可以輸入 `/開發` 來批次開發所有模組/功能，或輸入 `/開發 <模組/功能名稱>` 來啟動特定模組/功能的開發。"
        *   **若專案部分模組/功能已開發完成：**
            "我分析了專案狀態，目前已完成的內容包括：【列舉1-2個已完成的關鍵模組/功能】。接下來計劃開發的是：【列舉1-2個未開始或進行中的模組/功能】。您希望繼續開發剩餘模組/功能嗎？"
        *   **若所有規劃模組/功能均已開發完成：**
            "看起來所有規劃的模組和功能都已基本完成。您現在是希望進行程式碼全面檢查 (`/檢查`)，為特定模組/功能編寫測試 (`/測試 <模組/功能名稱>`)，還是有其他的修改或新需求？"